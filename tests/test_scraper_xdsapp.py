from unittest import TestCase
from unittest.mock import Mock
from fragview.scraper import ProcStats, ToolStatus
from fragview.scraper.xdsapp import _parse_results_log
from tests.utils import data_file_path


class TestParseResultsLog(TestCase):
    """
    test _parse_results_log() function
    """

    def setUp(self):
        self.stats = ProcStats("xdsapp")
        self.stats.status = ToolStatus.SUCCESS

        self.project = Mock()
        self.project.encrypted = False

    def test_xdsapp2(self):
        """
        test parsing results log file generated by XDSAPP version 2.*
        """
        _parse_results_log(
            self.project, data_file_path("results_xdsapp2.txt"), self.stats
        )

        self.assertEquals(self.stats.space_group, "P2(1)(4)")
        self.assertEquals(self.stats.unique_reflections, "43953")
        self.assertEquals(self.stats.reflections, "286392")
        self.assertEquals(self.stats.low_resolution_average, "41.23")
        self.assertEquals(self.stats.low_resolution_out, "1.51")
        self.assertEquals(self.stats.high_resolution_average, "1.43")
        self.assertEquals(self.stats.high_resolution_out, "1.43")
        self.assertEquals(self.stats.unit_cell_a, "42.39")
        self.assertEquals(self.stats.unit_cell_b, "41.23")
        self.assertEquals(self.stats.unit_cell_c, "72.53")
        self.assertEquals(self.stats.unit_cell_alpha, "90.0")
        self.assertEquals(self.stats.unit_cell_beta, "104.21")
        self.assertEquals(self.stats.unit_cell_gamma, "90.0")
        self.assertEquals(self.stats.multiplicity, "6.52")
        self.assertEquals(self.stats.i_sig_average, "11.50")
        self.assertEquals(self.stats.i_sig_out, "3.04")
        self.assertEquals(self.stats.r_meas_average, "65.3")
        self.assertEquals(self.stats.r_meas_out, "103.9")
        self.assertEquals(self.stats.completeness_average, "96.4")
        self.assertEquals(self.stats.completeness_out, "83.4")
        self.assertEquals(self.stats.mosaicity, "0.434")
        self.assertEquals(self.stats.isa, "13.35")

    def test_xdsapp3(self):
        """
        test parsing results log file generated by XDSAPP version 3.*
        """
        _parse_results_log(
            self.project, data_file_path("results_xdsapp3.txt"), self.stats
        )

        self.assertEquals(self.stats.space_group, "C2(5)")
        self.assertEquals(self.stats.unique_reflections, "60116")
        self.assertEquals(self.stats.reflections, "408895")
        self.assertEquals(self.stats.low_resolution_average, "44.63")
        self.assertEquals(self.stats.low_resolution_out, "1.90")
        self.assertEquals(self.stats.high_resolution_average, "1.79")
        self.assertEquals(self.stats.high_resolution_out, "1.79")
        self.assertEquals(self.stats.unit_cell_a, "88.69")
        self.assertEquals(self.stats.unit_cell_b, "82.27")
        self.assertEquals(self.stats.unit_cell_c, "93.70")
        self.assertEquals(self.stats.unit_cell_alpha, "90.0")
        self.assertEquals(self.stats.unit_cell_beta, "108.65")
        self.assertEquals(self.stats.unit_cell_gamma, "90.0")
        self.assertEquals(self.stats.multiplicity, "6.8")
        self.assertEquals(self.stats.i_sig_average, "19.23")
        self.assertEquals(self.stats.i_sig_out, "1.05")
        self.assertEquals(self.stats.r_meas_average, "4.7")
        self.assertEquals(self.stats.r_meas_out, "200.2")
        self.assertEquals(self.stats.completeness_average, "99.8")
        self.assertEquals(self.stats.completeness_out, "99.5")
        self.assertEquals(self.stats.mosaicity, "0.098")
        self.assertEquals(self.stats.isa, "30.04")
