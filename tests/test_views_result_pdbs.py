import tempfile
from pathlib import Path
from unittest.mock import patch
from django import test
from tests.utils import ViewTesterMixin

DATASET = "DS"
PROCESS = "proc"
REFINE = "ref"
PDB_CONTENT = b"DUMMY_PDB_DATA"


def _create_pdb(pdb_path):
    pdb_path.parent.mkdir(parents=True)
    pdb_path.write_bytes(PDB_CONTENT)


class TestFinalView(test.TestCase, ViewTesterMixin):
    URL = f"/pdbs/final/{DATASET}/{PROCESS}/{REFINE}"

    def setUp(self):
        self.setup_client()
        self.setup_project()

    @patch("fragview.views.result_pdbs.project_results_dir")
    def test_plain(self, res_dir_mock):
        with tempfile.TemporaryDirectory() as temp_dir:
            res_dir_mock.return_value = temp_dir
            _create_pdb(Path(temp_dir, DATASET, PROCESS, REFINE, "final.pdb"))

            # request the contents of the final.pdb
            resp = self.client.get(self.URL)

            # check that we successfully got PDBs content
            self.assertEqual(resp.status_code, 200)
            self.assertEqual(resp.content, PDB_CONTENT)


class TestLigandView(test.TestCase, ViewTesterMixin):
    ROOT_URL = f"/pdbs/ligand/{DATASET}/{PROCESS}/{REFINE}"
    LIGFIT_URL = f"{ROOT_URL}/ligfit"
    RHOFIT_URL = f"{ROOT_URL}/rhofit"

    def setUp(self):
        self.setup_client()
        self.setup_project()

    def _ligfit_pdb_path(self, temp_dir):
        return Path(
            temp_dir,
            DATASET,
            PROCESS,
            REFINE,
            "ligfit",
            "LigandFit_run_1_",
            "ligand_fit_1_1.pdb",
        )

    @patch("fragview.views.result_pdbs.project_results_dir")
    def test_ligfit(self, res_dir_mock):
        """
        test fetching the ligand PDB generated by 'ligfit' tool
        """
        with tempfile.TemporaryDirectory() as temp_dir:
            res_dir_mock.return_value = temp_dir

            _create_pdb(self._ligfit_pdb_path(temp_dir))

            # request the LigFit PDB
            resp = self.client.get(self.LIGFIT_URL)

            # check that we successfully got PDBs content
            self.assert_response_equals(
                resp, 200, PDB_CONTENT, "application/octet-stream"
            )

    @patch("fragview.views.result_pdbs.project_results_dir")
    def test_rhofit(self, res_dir_mock):
        """
        test fetching the ligand PDB generated by 'rhofit' tool
        """
        with tempfile.TemporaryDirectory() as temp_dir:
            res_dir_mock.return_value = temp_dir

            pdb_path = Path(temp_dir, DATASET, PROCESS, REFINE, "rhofit", "best.pdb")
            _create_pdb(pdb_path)

            # request the LigFit PDB
            resp = self.client.get(self.RHOFIT_URL)

            # check that we successfully got PDBs content
            self.assert_response_equals(
                resp, 200, PDB_CONTENT, "application/octet-stream"
            )

    @patch("fragview.views.result_pdbs.project_results_dir")
    def test_no_ligfit_pdb(self, res_dir_mock):
        """
        test the case when the generated ligand PDB is not found
        """
        with tempfile.TemporaryDirectory() as temp_dir:
            res_dir_mock.return_value = temp_dir

            # make sure the ligfit PDB does not exist
            self.assertFalse(self._ligfit_pdb_path(temp_dir).is_file())

            # request the LigFit PDB
            resp = self.client.get(self.LIGFIT_URL)

            # check that we got an 'not found' error response
            self.assert_not_found_response(resp, "no 'ligfit' PDB file found")

    def test_unknow_fitting_tool(self):
        """
        test the case when unexpected ligand fitting tool is specified
        """
        resp = self.client.get(f"{self.ROOT_URL}/kiwi")
        self.assert_not_found_response(resp, "unknown ligand fitting tool 'kiwi'")
